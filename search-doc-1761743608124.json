{"searchDocs":[{"title":"Browser catalog","type":0,"sectionRef":"#","url":"/docs/concepts/catalog/","content":"Browser catalog When a specific browser version is requested Selebrow uses its browser catalog to map the browser version to an image (along with other settings such as ports and environment). By default the catalog is loaded at startup from the following path: config/browsers.yaml (relative to current directory). If the file does not exist the catalog will be loaded from the Selebrow images repository. The remote file is updated automatically whenever new browser images are built. You can view the default catalog here. See description of browsers-uri and fallback-browsers-uri parameters For detailed information about the catalog structure please refer to the Browsers catalog format reference","keywords":"","version":"Next"},{"title":"Browser pooling","type":0,"sectionRef":"#","url":"/docs/concepts/pooling/","content":"Browser pooling One of Selebrow's key performance optimizations is the browser pooling feature, which is enabled by default. When a test suite completes and releases a browser Selebrow does not destroy the browser's container and places it into an idle pool. This allows the container to be reused by subsequent test suites, significantly reducing the overhead associated with creating new containers – an operation that can be particularly resource-intensive in busy Kubernetes environments. For detailed information please refer to the pool parameters documentation. It’s important to note that each combination of browser, version and environment results in a separate pool. The parameters mentioned above apply to each individual pool. For example, if one test is executed in Firefox and another in Chrome, there will be two distinct pools, each capable of maintaining up to pool-max-idle idle browsers.","keywords":"","version":"Next"},{"title":"Quota and queueing","type":0,"sectionRef":"#","url":"/docs/concepts/quota/","content":"Quota and queueing To avoid taking up all available resources by running multiple tests in parallel Selebrow provides simple quota management capabilities, which allow you to limit the number of concurrently running browsers. When the browser limit is reached, all new requests are placed into a waiting queue until a browser becomes available or a timeout is reached. For further details, please refer to the Browser limit and queue parameters documentation.","keywords":"","version":"Next"},{"title":"UI","type":0,"sectionRef":"#","url":"/docs/concepts/ui/","content":"UI Selebrow comes with a simple UI which allows you to monitor running sessions and reset or connect via VNC to selected session (if it was enabled for the session). The UI is enabled by default (unless running in CI environment) and accessible via the http://localhost:4444/ui URL.","keywords":"","version":"Next"},{"title":"Backend","type":0,"sectionRef":"#","url":"/docs/concepts/backend/","content":"","keywords":"","version":"Next"},{"title":"Docker​","type":1,"pageTitle":"Backend","url":"/docs/concepts/backend/#docker","content":" When the Docker backend is enabled every browser request starts a new Docker container (unless pooling is enabled). For detailed configuration options, please refer to the Docker parameters reference.  ","version":"Next","tagName":"h2"},{"title":"Network and port mapping​","type":1,"pageTitle":"Backend","url":"/docs/concepts/backend/#network-and-port-mapping","content":" If Selebrow is started on the host machine it communicates with the browser containers by publishing ephemeral ports. This mode is referred to as port mapping mode; see the docker-port-mapping parameter description for specific details.  If you run Selebrow within a Docker container it communicates directly with the browser containers and must be connected to the configured Docker network. If you do not specify the Docker network explicitly, Selebrow will try to detect its network by inspecting its own Docker container.  ","version":"Next","tagName":"h3"},{"title":"Kubernetes​","type":1,"pageTitle":"Backend","url":"/docs/concepts/backend/#kubernetes","content":" When the Kubernetes backend is enabled each browser request starts a new Kubernetes pod, unless pooling is enabled. For detailed configuration options, please refer to the Kubernetes parameters reference.  ","version":"Next","tagName":"h2"},{"title":"Pod template​","type":1,"pageTitle":"Backend","url":"/docs/concepts/backend/#pod-template","content":" The browser Pod manifest is generated using the configured Pod template. This process is akin to Helm chart templates, but here a single template file is used (pod-template.yaml) which is rendered using values from values.yaml each time a new browser pod is launched. This approach offers the flexibility to customize the browser pod to suit your needs, such as adding metadata, volumes, or sidecar containers. For more information, please see the templates reference.  ","version":"Next","tagName":"h3"},{"title":"In Cluster mode​","type":1,"pageTitle":"Backend","url":"/docs/concepts/backend/#in-cluster-mode","content":" If the Selebrow service itself is started inside a Kubernetes Pod (which is recommended) it expects that its Pod has mounted a ServiceAccount's API credentials. These credentials must have the following permissions for the pods resources:  - create - get - list - watch - delete   In this mode Selebrow communicates directly to browser Pod IPs and ports over the Kubernetes network.  ","version":"Next","tagName":"h3"},{"title":"Out of cluster mode​","type":1,"pageTitle":"Backend","url":"/docs/concepts/backend/#out-of-cluster-mode","content":" For debugging purposes you may want to start Selebrow service outside the Kubernetes cluster. This mode can be enabled using the kube-cluster-mode-out parameter. In this case you need to have a kubeconfig with access to the namespace where you want Selebrow to create browser pods. This mode is not recommended for production use because of unreliable Kubernetes Pod port forwarding, which is used to communicate with browser Pods. ","version":"Next","tagName":"h3"},{"title":"Images","type":0,"sectionRef":"#","url":"/docs/concepts/images/","content":"","keywords":"","version":"Next"},{"title":"Updates​","type":1,"pageTitle":"Images","url":"/docs/concepts/images/#updates","content":" New images are automatically built as soon as new Chrome/Firefox or Playwright version becomes available. When the new images are released,default browser catalog is also updated (requires Selebrow restart to pick up the changes).  ","version":"Next","tagName":"h2"},{"title":"Alternative images​","type":1,"pageTitle":"Images","url":"/docs/concepts/images/#alternative-images","content":" Selebrow is also backward-compatible with the following browser images:  Aerokube selenoid images (source) - currently abandoned and not getting updatedtwilio selenoid-images (source) - maintained fork of original Aerokube selenoid images ","version":"Next","tagName":"h2"},{"title":"Parameters","type":0,"sectionRef":"#","url":"/docs/configuration/parameters/","content":"","keywords":"","version":"Next"},{"title":"Common parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#common-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"listen​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#listen","content":" String, defaults to 0.0.0.0:4444 when Selebrow is started in Kubernetes or Docker container and 127.0.0.1:4444 otherwise.  (Optional) IP and port for Selebrow to listen on. Below are few valid examples  0.0.0.0:4444 - bind to all interfaces, listen on port 4444:4444 - same as above127.0.0.1:4444 - bind to 127.0.0.1 (loopback interface) only, listen on port 4444  ","version":"Next","tagName":"h3"},{"title":"backend​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#backend","content":" String, defaults to auto  Backend to use, allowed values are:  auto (default)kubernetes (see Kubernetes)docker (see Docker)  When this parameter is set to auto or not specified, the Kubernetes backend will be selected if Selebrow was started inside a Kubernetes pod. Otherwise the Docker backend will be used.  ","version":"Next","tagName":"h3"},{"title":"create-timeout​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#create-timeout","content":" String, defaults to 3m  Time to wait for a browser container to start. The client will get an HTTP 504 Gateway Timeout response if this timeout has occurred. Can be increased in case browser Pods/Containers take a longer time to start (image pool is slow for example) The value must be in the Go Duration format.  ","version":"Next","tagName":"h3"},{"title":"connect-timeout​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#connect-timeout","content":" String, defaults to 200ms  Timeout set on connections made to browser containers. Used in browser readiness checks as well as in forwarded Webdriver/Playwright requests. Consider increasing it if your network environment has lag issues. The value must be in the Go Duration format.  ","version":"Next","tagName":"h3"},{"title":"Browsers catalog parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#browsers-catalog-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"browsers-uri​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#browsers-uri","content":" String, defaults to config/browsers.yaml  Browser catalog source to load at startup. Can be either local path ot http(s) URL  ","version":"Next","tagName":"h3"},{"title":"fallback-browsers-uri​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#fallback-browsers-uri","content":" String, defaults to https://selebrow.dev/browsers.yaml  Used when Browser catalog couldn't be loaded using source specified in browsers-uri  ","version":"Next","tagName":"h3"},{"title":"Kubernetes parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#kubernetes-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"create-retries​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#create-retries","content":" Integer, defaults to 5  Number of retries for failed Kubernetes Pod create requests before returning HTTP 504 Internal server error. A retry is made whenever the Reason field has one of following values in the Kubernetes API response metadata:  ConflictTooManyRequestsInternalErrorServerTimeoutTimeout  ","version":"Next","tagName":"h3"},{"title":"kube-cluster-mode-out​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#kube-cluster-mode-out","content":" Boolean, defaults to false  Selebrow is expected to run inside a Kubernetes pod, so the Kubernetes client is created using InClusterConfig by default. However, this is not ideal for development, as you may want to run Selebrow under a debugger. In that case you can set kube-cluster-mode-out to true.  See also kube-config  ","version":"Next","tagName":"h3"},{"title":"kube-config​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#kube-config","content":" String, defaults to $HOME/.kube/config  Kubernetes client config file to use when kube-cluster-mode-out is set to true.  ","version":"Next","tagName":"h3"},{"title":"kube-templates-path​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#kube-templates-path","content":" String, defaults to config/  Path to Kubernetes Pod template files. See templates reference for details.  ","version":"Next","tagName":"h3"},{"title":"namespace​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#namespace","content":" String, defaults to default  Kubernetes namespace to create browser Pods in.  ","version":"Next","tagName":"h3"},{"title":"Docker parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#docker-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"docker-platform​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#docker-platform","content":" String, not set by default  Docker platform for browser images.  By default, when looking for browser image, Docker will try to get the native image for the current platform and if that doesn't exist it will fall back to amd64  You can override this behaviour by explicitly setting the required platform for browser images. Below are valid examples for the docker-platform parameter:  arm64 - Only look for linux/arm64 images (no fallback to amd64 will be made)linux/arm64 same as above  ","version":"Next","tagName":"h3"},{"title":"docker-network​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#docker-network","content":" String, not set by default  Docker network to use for browser containers.  When this parameter is not set (default), the following algorithm is used:  If running in port mapping mode, Docker default bridge will be used. Otherwise Selebrow will try to detect the current Docker network (assuming Selebrow itself has been started inside a Docker container)  ","version":"Next","tagName":"h3"},{"title":"docker-port-mapping​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#docker-port-mapping","content":" String, defaults to auto  Container port mapping mode  auto (default)enabled - explicitly enableddisabled - explicitly disabled  When this parameter is set to auto, port mapping mode is set to disabled if Selebrow is running inside Docker container itself and to enabled otherwise.  ","version":"Next","tagName":"h3"},{"title":"docker-privileged​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#docker-privileged","content":" Boolean, defaults to false  Enables privileged mode when running browser Containers. It's not generally recommended to enable this flag. The Selebrow images are built to work in unprivileged mode.  ","version":"Next","tagName":"h3"},{"title":"docker-pull-images​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#docker-pull-images","content":" Boolean, defaults to false  By default, Selebrow pulls the browser image upon first request for browser/version. This way only the required images are pulled locally to save storage space at the exchange of a longer first browser request.  When this parameter is set to true, Selebrow will pull all images configured in the Browser catalog at startup. This is useful for a server installation where you expect low browser startup time.  ","version":"Next","tagName":"h3"},{"title":"Browser limit and queue parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#browser-limit-and-queue-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"quota-limit​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#quota-limit","content":" Integer, defaults to 0  The maximum number of simultaneously running browsers.  Some values of this parameter are treated specially:  0 (default) automatically calculate limit based on available resources. Currently implemented only for the Docker backend.-1 unlimited quota  The client will get an HTTP 429 Too Many Requests response if quota is exceeded, unless queue-size is set.  ","version":"Next","tagName":"h3"},{"title":"queue-size​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#queue-size","content":" Integer, defaults to 25  The size of the internal queue of browsers waiting for available quota.  When quota-limit is set to a non negative value and the quota is full, any new browser request will be put into an internal queue until either quota is available or queue-timeout is reached. The client will get an HTTP 429 Too Many Requests response if the queue is full.  ","version":"Next","tagName":"h3"},{"title":"queue-timeout​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#queue-timeout","content":" String, defaults to 1m  The time a browser can wait for available quota in the browsers queue. The client will get an HTTP 429 Too Many Requests response if this timeout occurred.  The value must be in the Go Duration format  ","version":"Next","tagName":"h3"},{"title":"Pool parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#pool-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"pool-max-idle​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#pool-max-idle","content":" Integer, defaults to 5  Pool size for idle browser containers. When set to 0 the pooling feature is disabled.  ","version":"Next","tagName":"h3"},{"title":"pool-idle-timeout​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#pool-idle-timeout","content":" String, defaults to 1m  The maximum time a browser container can be idle in the pool before eviction.  The value must be in the Go Duration format  ","version":"Next","tagName":"h3"},{"title":"pool-max-age​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#pool-max-age","content":" String, defaults to 15m  If a browser is older than the value specified in this parameter it's unconditionally evicted from the pool (recycled).  The value must be in the Go Duration format  ","version":"Next","tagName":"h3"},{"title":"UI parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#ui-parameters","content":" ","version":"Next","tagName":"h2"},{"title":"ui​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#ui","content":" Boolean, defaults to true  The UI is enabled by default unless Selebrow was started in a CI environment.  ","version":"Next","tagName":"h3"},{"title":"vnc-password​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#vnc-password","content":" String  The VNC password to be used for connecting to browsers via the UI. The default value matches the default password in Selebrow images, which is selebrow.  ","version":"Next","tagName":"h3"},{"title":"Logging parameters​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#logging-parameters","content":" Since logging is inititalized very early at startup, it can only be configured with environment variables, there are no corresponding command line parameters.  ","version":"Next","tagName":"h2"},{"title":"SB_LOG_LEVEL​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#sb_log_level","content":" String  Log level to use. Allowed values are:  debuginfo (default)warnerror  ","version":"Next","tagName":"h3"},{"title":"SB_LOG_FORMAT​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#sb_log_format","content":" String  Log format:  json - structured logging in json format (automatically enabled when Selebrow is run in Kubernetes).console - human-readable console logs (default). Color output is enabled when running in terminal.  ","version":"Next","tagName":"h3"},{"title":"SB_LOG_OUTPUT​","type":1,"pageTitle":"Parameters","url":"/docs/configuration/parameters/#sb_log_output","content":" String  Log output file/stream. Default is stdout. ","version":"Next","tagName":"h3"},{"title":"Templates","type":0,"sectionRef":"#","url":"/docs/configuration/templates/","content":"","keywords":"","version":"Next"},{"title":"values.yaml​","type":1,"pageTitle":"Templates","url":"/docs/configuration/templates/#valuesyaml","content":" Must be a map with static values which will then be available as .Values.* in the Pod template. This is a very similar concept to Helm values files  ","version":"Next","tagName":"h2"},{"title":"pod-template.yaml​","type":1,"pageTitle":"Templates","url":"/docs/configuration/templates/#pod-templateyaml","content":" The result of rendering this template must be a valid Yaml/Json Pod manifest with at least one container representing the browser container.  Multiple variables are available in the Pod template:  ","version":"Next","tagName":"h2"},{"title":".Values.*​","type":1,"pageTitle":"Templates","url":"/docs/configuration/templates/#values","content":" Every value X defined in values.yaml is available in the template as .Values.X.  ","version":"Next","tagName":"h3"},{"title":".Browser.*​","type":1,"pageTitle":"Templates","url":"/docs/configuration/templates/#browser","content":" These values are extracted from the Browser catalog for requested browser/version.  Image​  String  Browser image reference including tag. See image  Cmd​  Array of Strings  Container command line. See cmd  Ports​  Map String → Integer  The map of container ports to be exposed. See ports  Path​  String  HTTP request path prefix. See path  Env​  Map String → String  Static environment variables. See env  Limits​  Map String → Kubernetes quantity  Resource limits for browser container. See limits  ","version":"Next","tagName":"h3"},{"title":".Options.*​","type":1,"pageTitle":"Templates","url":"/docs/configuration/templates/#options","content":" These values are taken from Webdriver Capability or Playwright request parameters  Env​  Map String → String  Requested additional environment variables. The variables below are always added with values parsed from capabilities:  ENABLE_VNC: &quot;true&quot; # corresponds to VNCEnabled SCREEN_RESOLUTION: &quot;1920x1080x24&quot; # corresponds to Resolution   VNCEnabled​  Boolean  Indicates whether VNC was enabled in the browser request.  Resolution​  String  Screen resolution for X Server (applies only to headed browser requests). Value format is WIDTHxHEIGHTxBPP. Example: 1920x1080x24  Labels​  Map String → String  Pod metadata labels from request.  Hosts​  Map String → Array of Strings  IP to host alias map to be used in Pod's hostAliasesbased on host aliases from the browser request.  &quot;10.1.2.3&quot;: - &quot;foo.remote&quot; - &quot;bar.remote&quot;   ","version":"Next","tagName":"h3"},{"title":".CIEnvironment.*​","type":1,"pageTitle":"Templates","url":"/docs/configuration/templates/#cienvironment","content":" These variables are available when Selebrow is run as a Gitlab CI service:  See also: Predefined CI/CD variables reference  JobID​  String  The value of CI_JOB_ID environment variable.  ProjectNamespace​  String  The value of CI_PROJECT_NAMESPACE environment variable.  ProjectName​  String  The value of CI_PROJECT_NAME environment variable. ","version":"Next","tagName":"h3"},{"title":"Browser catalog format","type":0,"sectionRef":"#","url":"/docs/configuration/browsers/","content":"","keywords":"","version":"Next"},{"title":"File structure​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#file-structure","content":" The browser catalog is a YAML file of the following format:  playwright: &lt;browser&gt;: images: &lt;flavor&gt;: [browser options...] webdriver: &lt;browser&gt;: images: &lt;flavor&gt;: [browser options...]   ","version":"Next","tagName":"h2"},{"title":"Browser​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#browser","content":" You can configure as many browsers as you want. See how to request specific browser in Webdriveror Playwright sessions.  ","version":"Next","tagName":"h2"},{"title":"Flavor​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#flavor","content":" Flavor is a way to have different images of the same browser. For example you can build images containing some additional binary components like plugins. By default Selebrow will look for images defined with default flavor. You can request a specific flavor in Webdriver or Playwright session requests.  ","version":"Next","tagName":"h2"},{"title":"Browser options​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#browser-options","content":" ","version":"Next","tagName":"h2"},{"title":"image​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#image","content":" Image reference (without tag) for browser container.  image: selebrow/selebrow-images/playwright/chrome   ","version":"Next","tagName":"h3"},{"title":"versionTags​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#versiontags","content":" Mapping of the browser versions to actual image tags.  versionTags: '133.0': v0.4.0-133.0 '134.0': v0.4.0-134.0 '135.0': v0.4.1-135.0 '136.0': v0.4.5-136.0   See how to request specific browser version in Webdriver or Playwright sessions.  ","version":"Next","tagName":"h3"},{"title":"defaultVersion​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#defaultversion","content":" Default browser version to use in versionTags when no specific version was requested.  ","version":"Next","tagName":"h3"},{"title":"cmd​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#cmd","content":" Browser container command line.  cmd: - sh - /entrypoint.sh   ","version":"Next","tagName":"h3"},{"title":"env​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#env","content":" Environment variables to be injected into the browser container.  env: LANG: en_US.UTF-8 LANGUAGE: en_US:es TZ: America/Chicago   See how to override or set environment variables in Webdriver or Playwright sessions.  ","version":"Next","tagName":"h3"},{"title":"ports​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#ports","content":" Defines actual port numbers as exposed by the image  ports: browser: 4444 # Mandatory: Main port for Webdriver or Playwright server vnc: 5900 # VNC port (used when VNC is enabled) clipboard: 9090 # Webdriver only: port for clipboard service devtools: 7070 # Webdriver only: port for devtools service fileserver: 8080 # Webdriver only: port for fileserver service   See how to enable VNC in Webdriver or Playwright sessions.  ","version":"Next","tagName":"h3"},{"title":"path​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#path","content":" HTTP request path prefix to be added to every Webdriver/Playwright request when forwarding requests to browser port  path: /wd/hub   Also see ports  ","version":"Next","tagName":"h3"},{"title":"limits​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#limits","content":" Resource limits for browser containers (applies to both Kubernetes and Docker backends). For the Kubernetes backend the same values are also used for container requests  limits: cpu: '1' memory: 2Gi   Only cpu and memory resources are supported at the moment. The value must be in the Kubernetes quantity type format.  ","version":"Next","tagName":"h3"},{"title":"labels​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#labels","content":" Labels to be assigned to browser's Docker container or Kubernetes pod  labels: label1: value1 label-2: value-2   ","version":"Next","tagName":"h3"},{"title":"shmSize​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#shmsize","content":" Applies to Docker backend only.  Shared memory size in bytes for browser's Docker container. Corresponds to Docker --shm-size run parameter  shmSize: 2147483648 # 2GB of shared memory   ","version":"Next","tagName":"h3"},{"title":"tmpfs​","type":1,"pageTitle":"Browser catalog format","url":"/docs/configuration/browsers/#tmpfs","content":" Applies to Docker backend only.  Tmpfs mounts for browser's Docker container. Corresponds to Docker --tmpfs run parameter  tmpfs: - /tmp - &quot;/var/tmp:nodev&quot; # mount options are also supported  ","version":"Next","tagName":"h3"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro/","content":"","keywords":"","version":"Next"},{"title":"Key features​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#key-features","content":" Kubernetes backend supportAbility to run as GitLab CI serviceSupport for running Playwright testsBrowser pooling for faster tests startupUI integrated directly into binary, no separate components required ","version":"Next","tagName":"h2"},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"/docs/start/kubernetes/","content":"","keywords":"","version":"Next"},{"title":"Namespace setup​","type":1,"pageTitle":"Kubernetes","url":"/docs/start/kubernetes/#namespace-setup","content":" First, create a namespace for the Selebrow service deployment:  kubectl create ns selebrow   You can skip this step by providing the --create-namespace flag with the helm install command later  By default, Selebrow will create browser pods in its own namespace. However, if you prefer, you can create a separate namespace for the browser pods:  kubectl create ns browsers   When installing the Selebrow Helm chart, pass the --set selebrow.namespace=browsers parameter to use a separate namespace.  ","version":"Next","tagName":"h2"},{"title":"Installing the Helm chart​","type":1,"pageTitle":"Kubernetes","url":"/docs/start/kubernetes/#installing-the-helm-chart","content":" Make sure you have Helm version &gt;= v3.8.0 installed.  You can preview available chart values by running the following command:  helm show values oci://ghcr.io/selebrow/helm-charts/selebrow:v1.0.1   Install the Selebrow chart into the previously created namespace, providing any additional values as needed. For example:  helm install selebrow oci://ghcr.io/selebrow/helm-charts/selebrow:v1.0.1 -n selebrow \\ --set ingress.enabled=true \\ --set selebrow.namespace=browsers \\ --set templateValues.browser.env.TZ=America/Chicago  ","version":"Next","tagName":"h2"},{"title":"GitLab CI","type":0,"sectionRef":"#","url":"/docs/start/gitlab-ci/","content":"","keywords":"","version":"Next"},{"title":"Requirements​","type":1,"pageTitle":"GitLab CI","url":"/docs/start/gitlab-ci/#requirements","content":" GitLab version 15 or laterGitLab Kubernetes executor version 15 or later  ","version":"Next","tagName":"h2"},{"title":"Service account and namespace setup​","type":1,"pageTitle":"GitLab CI","url":"/docs/start/gitlab-ci/#service-account-and-namespace-setup","content":" The Selebrow service requires permissions to create browser pods. These permissions must be given to a service account which is set for build pods. It's a good idea to have separate service accounts and namespaces created for this purpose:  kubectl create sa selebrow -n &lt;GITLAB_NAMESPACE&gt; kubectl create ns browsers   GITLAB_NAMESPACE - The Kubernetes namespace where your GitLab Runner is installed.  Next you need a Role and a RoleBinding for the ServiceAccount you have created. Save the manifest below to the selebrow.yaml file:  Kubernetes manifest selebrow.yaml apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: selebrow rules: - apiGroups: - &quot;&quot; resources: - pods verbs: - create - get - list - watch - delete --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: selebrow roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: selebrow subjects: - apiGroup: &quot;&quot; kind: ServiceAccount name: browsers namespace: &lt;GITLAB_NAMESPACE&gt;   Replace &lt;GITLAB_RUNNER_NAMESPACE&gt; with your GitLab runner's namespace name, then apply the manifest to the newly created browsers namespace:  kubectl apply -f selebrow.yaml -n browsers   ","version":"Next","tagName":"h2"},{"title":"Job template​","type":1,"pageTitle":"GitLab CI","url":"/docs/start/gitlab-ci/#job-template","content":" Selebrow is meant to run as a GitLab Service, so we recommend to define and use separate job template:  .selebrow: services: - ghcr.io/selebrow/selebrow variables: KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: selebrow PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: &quot;1&quot;   Here KUBERNETES_SERVICE_ACCOUNT_OVERWRITE is used to run the job under a separate service account we created earlier, see GitLab documentation for further details. Use the PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD env to disable unnecessary browser binary downloads by Playwright.  Once the template is defined you can use it in your actual e2e test job. An example for Playwright tests:  e2e-tests: extends: .selebrow image: node:22 before_script: - npm install script: - npx playwright test  ","version":"Next","tagName":"h2"},{"title":"Docker","type":0,"sectionRef":"#","url":"/docs/start/docker/","content":"","keywords":"","version":"Next"},{"title":"System requirements and Runtime setup​","type":1,"pageTitle":"Docker","url":"/docs/start/docker/#system-requirements-and-runtime-setup","content":" macOSWindowsLinux Supported OS: macOS Big Sur (version 11) or later Supported and tested Container Runtimes: Docker Desktop, Colima, OrbStackand Podman Desktop. For Apple Silicon (M1/M2/M3) devices, you need to install and enable amd64 emulation using Rosetta 2. Run the following command in your terminal: softwareupdate --install-rosetta Next, navigate to Docker Desktop → Preferences and make sure the option Use Rosetta for x86_64/amd64 emulation on Apple Silicon found on the General tab is enabled. If you are using Colima, it must be started with --arch aarch64 --vm-type=vz --vz-rosetta options. E.g.: colima start --cpu 6 --memory 8 --disk 100 --mount $HOME:w --arch aarch64 --vm-type=vz --vz-rosetta If you see a 'virtual machine type' cannot be updated after initial setup, discarded warning when starting Colima, you will need to delete the Colima profile and start again with the options above: colima delete OrbStack enables Rosetta support by default, please refer to the documentation for more information. Podman Desktop also enables Rosetta support by default, additionally you need to enable Docker compatibility.  ","version":"Next","tagName":"h2"},{"title":"Install​","type":1,"pageTitle":"Docker","url":"/docs/start/docker/#install","content":" ","version":"Next","tagName":"h2"},{"title":"From GitHub Releases​","type":1,"pageTitle":"Docker","url":"/docs/start/docker/#from-github-releases","content":" Download the Selebrow binary for your OS/Platform from the Releases page. We recommend always using the latest release.  macOSWindowsLinux Grant executable permissions to the downloaded file and place it in a directory that is included in your $PATH: # macOS intel chmod a+x selebrow-darwin-amd64 mv selebrow-darwin-amd64 /usr/local/bin/selebrow # macOS Apple silicon chmod a+x selebrow-darwin-arm64 mv selebrow-darwin-arm64 /usr/local/bin/selebrow Additionally, you may need to remove the com.apple.quarantine file attribute to avoid Gatekeeper from blocking the execution of Selebrow: xattr -d com.apple.quarantine /usr/local/bin/selebrow   ","version":"Next","tagName":"h3"},{"title":"Using OS Package manager​","type":1,"pageTitle":"Docker","url":"/docs/start/docker/#using-os-package-manager","content":" macOSWindowsLinux TODO  ","version":"Next","tagName":"h3"},{"title":"Run​","type":1,"pageTitle":"Docker","url":"/docs/start/docker/#run","content":" Run the following command from you favorite terminal:  selebrow  ","version":"Next","tagName":"h2"},{"title":"URL parameters","type":0,"sectionRef":"#","url":"/docs/usage/playwright/url-parameters/","content":"","keywords":"","version":"Next"},{"title":"arg​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#arg","content":" Additional command line arguments to pass to the browser binary. Corresponds to Playwright argslaunch option.  Example: arg=--arg1&amp;arg=--arg2=value  ","version":"Next","tagName":"h2"},{"title":"env​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#env","content":" Additional environment variables to set in browser pod/container. corresponds to Playwright envlaunch option.  Example: env=VAR1=val1&amp;env=VAR2=val2  ","version":"Next","tagName":"h2"},{"title":"headless​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#headless","content":" If set to false the browser is started in headful mode under X Server and with VNC enabled. If set to true (default) browser is started in headless mode. Corresponds to Playwright headlesslaunch option.  Also see Chrome headless notes.  ","version":"Next","tagName":"h2"},{"title":"channel​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#channel","content":" Browser distribution channel. Requires additional binaries inside the images.  Corresponds to Playwright channellaunch option.  Set to chromium to start Chrome/Chromium in &quot;new headless&quot; mode. Also see Chrome headless notes.  ","version":"Next","tagName":"h2"},{"title":"firefoxUserPref​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#firefoxuserpref","content":" Firefox user preferences  Corresponds to Playwright firefoxUserPrefslaunch option.  Example: firefoxUserPref=int.pref=1&amp;firefoxUserPref=bool.pref=true&amp;firefoxUserPref=str.pref=qwerty  ","version":"Next","tagName":"h2"},{"title":"resolution​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#resolution","content":" Screen resolution to set for X Server, applies only when headless is set to false. Value format is WIDTHxHEIGHTxBPP.  Example: resolution=1920x1080x24  ","version":"Next","tagName":"h2"},{"title":"link​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#link","content":" Browser containers' links, applies to Docker backend only.  Example: link=cont1:alias1&amp;link=cont2:alias2  ","version":"Next","tagName":"h2"},{"title":"host​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#host","content":" Additional host entries to add to /etc/hosts inside browser pods/containers, applies to Docker backend only.  Example: host=host1:1.1.1.1&amp;host=host2:host-gateway  ","version":"Next","tagName":"h2"},{"title":"network​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#network","content":" Additional Docker networks for browser containers to connect to, applies to Docker backend only.  Example: network=net1&amp;network=net2  ","version":"Next","tagName":"h2"},{"title":"label​","type":1,"pageTitle":"URL parameters","url":"/docs/usage/playwright/url-parameters/#label","content":" Additional labels to set on browser pods/containers, merged with browser catalog's labels with higher precedence.  Example: label=label-1:value1&amp;label=label-2:value2 ","version":"Next","tagName":"h2"},{"title":"Playwright","type":0,"sectionRef":"#","url":"/docs/usage/playwright/","content":"","keywords":"","version":"Next"},{"title":"Test project settings​","type":1,"pageTitle":"Playwright","url":"/docs/usage/playwright/#test-project-settings","content":" In your Playwright test project settings, set the connectOptions.wsEndpointin the following format: ws://localhost:4444/pw/&lt;chrome|firefox|webkit&gt;/[playwright version]. You can omit the version part, but be prepared to update the playwright and @playwright/test versions in your package.json when the default version of the Playwright image changes.  Refer to the URL parameters page for a full list of additional supported parameters.  ","version":"Next","tagName":"h2"},{"title":"Chrome headless notes​","type":1,"pageTitle":"Playwright","url":"/docs/usage/playwright/#chrome-headless-notes","content":" Starting from Playwright 1.49.0 (Chrome 130/Chromium 131) the Chrome binary was split into two separate binaries: headless-shell andchrome (you can read more about this here).  You now have three different modes for running Chrome:  &quot;old headless&quot; (default) — Uses the headless-shell binary.&quot;new headless&quot; — Enabled via the channel=chromium URL parameter; uses the &quot;real&quot; chrome binary.&quot;headful&quot; — Enabled by setting headless=false; starts Chrome with a GUI under an X server, and allows connecting to it via VNC.  ","version":"Next","tagName":"h2"},{"title":"Config excerpt example​","type":1,"pageTitle":"Playwright","url":"/docs/usage/playwright/#config-excerpt-example","content":" export default defineConfig({ projects: [ { name: 'chrome', use: { ...devices['Desktop Chrome'], connectOptions: { wsEndpoint: 'ws://localhost:4444/pw/chrome/1.49.0' // your playwright dependencies must match this version // wsEndpoint: &quot;ws://localhost:4444/pw/chrome&quot; // image default version will be used // wsEndpoint: &quot;ws://localhost:4444/pw/chrome/1.42.1?arg=--arg1&amp;arg=--arg2=value&quot; // you can pass command line argumets to the browser // wsEndpoint: &quot;ws://localhost:4444/pw/chrome/1.42.1?channel=chromium // run Chrome in &quot;headless new&quot; mode (supported since Playwright 1.49.0) // wsEndpoint: &quot;ws://localhost:4444/pw/chrome/1.42.1?headless=false // run in headful mode (also enables VNC) // wsEndpoint: &quot;ws://localhost:4444/pw/chrome/1.42.1?env=PW_TEST_SCREENSHOT_NO_FONTS_READY=1&amp;env=PW_EXPERIMENTAL_SERVICE_WORKER_NETWORK_EVENTS=1 // pass additional environemnt variables } } }, { name: 'firefox', use: { ...devices['Desktop Firefox'], connectOptions: { wsEndpoint: 'ws://localhost:4444/pw/firefox/1.49.0' // wsEndpoint: 'ws://localhost:4444/pw/firefox/1.49.0?firefoxUserPref=something.enable=false' // set additional Firefox User prefs } }, } { name: 'iPhone 11 Pro', use: { ...devices['iPhone 11 Pro'], // webkit browser will be used, see https://github.com/microsoft/playwright/blob/v1.49.0/packages/playwright-core/src/server/deviceDescriptorsSource.json#L521 connectOptions: { wsEndpoint: 'ws://localhost:4444/pw/webkit/1.49.0' } }, } ...  ","version":"Next","tagName":"h2"},{"title":"Capabilities","type":0,"sectionRef":"#","url":"/docs/usage/webdriver/capabilities/","content":"","keywords":"","version":"Next"},{"title":"browserName​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#browsername","content":" String Mandatory  Browser name to request as defined in Browsers catalog  ","version":"Next","tagName":"h2"},{"title":"browserVersion​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#browserversion","content":" String  Specific browser version to use as defined in Browsers catalog. If not set, the default version will be used.  ","version":"Next","tagName":"h2"},{"title":"selenoid:options​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#selenoidoptions","content":" Object  Capabilities extension which allows you to request additional properties:  ","version":"Next","tagName":"h2"},{"title":"name​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#name","content":" String  Test/TestSuite name - this value is displayed in the UI on the Webdriver sessions list page. Doesn't have any special meaning - for informational purposes only.  ","version":"Next","tagName":"h3"},{"title":"env​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#env","content":" Array of Strings  Additional environment variables to be injected into browser containers/pods, merged with browser catalog's envs with higher precedence:  &quot;env&quot;: [ &quot;MY_ENV_VAR1=value1&quot;, &quot;MY_ENV_VAR2=value2&quot; ]   ","version":"Next","tagName":"h3"},{"title":"flavor​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#flavor","content":" String  Browser image flavor to use.  ","version":"Next","tagName":"h3"},{"title":"screenResolution​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#screenresolution","content":" String  Screen resolution to set for X Server. Value format is WIDTHxHEIGHTxBPP:  &quot;screenResolution&quot;: &quot;1920x1080x24&quot;   ","version":"Next","tagName":"h3"},{"title":"enableVNC​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#enablevnc","content":" Boolean  When set to true it's possible to connect to a Webdriver session using VNC client (or directly from UI).  ","version":"Next","tagName":"h3"},{"title":"hostsEntries​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#hostsentries","content":" Array of Strings  Additional host entries to add to /etc/hosts inside browser pods/containers:  &quot;hostsEntries&quot;: [ &quot;host1:1.1.1.1&quot;, &quot;host2:host-gateway&quot; ]   A special host-gateway value can be used to create a host entry for the Docker host (works with Docker backend only).  ","version":"Next","tagName":"h3"},{"title":"labels​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#labels","content":" Map String → String  Additional labels to set on browser pods/containers, merged with browser catalog's labelswith higher precedence:  &quot;labels&quot;: { &quot;label-1&quot;: &quot;value1&quot;, &quot;label-2&quot;: &quot;value2&quot; }   ","version":"Next","tagName":"h3"},{"title":"applicationContainers​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#applicationcontainers","content":" Array of Strings, applies to Docker backend only.  Browser containers' links:  &quot;applicationContainers&quot;: [ &quot;cont1:alias1&quot;, &quot;cont2:alias2&quot; ]   ","version":"Next","tagName":"h3"},{"title":"additionalNetworks​","type":1,"pageTitle":"Capabilities","url":"/docs/usage/webdriver/capabilities/#additionalnetworks","content":" Array of Strings, applies to Docker backend only.  Additional Docker networks for browser containers to connect to:  &quot;additionalNetworks&quot;: [ &quot;net1&quot;, &quot;net2&quot; ]  ","version":"Next","tagName":"h3"},{"title":"Accessing Chrome DevTools","type":0,"sectionRef":"#","url":"/docs/usage/webdriver/devtools/","content":"","keywords":"","version":"Next"},{"title":"Recording trace via CDP example​","type":1,"pageTitle":"Accessing Chrome DevTools","url":"/docs/usage/webdriver/devtools/#recording-trace-via-cdp-example","content":" const { remote } = require('webdriverio'); const puppeteer = require('puppeteer-core'); const host = 'localhost'; const port = 4444; (async () =&gt; { const browser = await remote({ hostname: host, port: port, path: '/wd/hub', capabilities: { browserName: 'chrome', // browserVersion: '123.0', // omit to run default (latest) version &quot;wdio:enforceWebDriverClassic&quot;: true // disable BiDi protocol as Selebrow doesn't support it yet } }); console.log(browser.sessionId); try { const devtools = await puppeteer.connect({ browserWSEndpoint: `ws://${host}:${port}/devtools/${browser.sessionId}` }); try { const page = await devtools.newPage(); await page.tracing.start({ path: 'trace.json', screenshots: true }) await page.goto('https://selebrow.dev'); await page.tracing.stop() } finally { await devtools.close(); } } finally { await browser.deleteSession(); } })().catch((e) =&gt; console.error(e));  ","version":"Next","tagName":"h2"},{"title":"Webdriver","type":0,"sectionRef":"#","url":"/docs/usage/webdriver/","content":"","keywords":"","version":"Next"},{"title":"Remote connection​","type":1,"pageTitle":"Webdriver","url":"/docs/usage/webdriver/#remote-connection","content":" Connect to Selebrow as a remote Webdriver host using the http://localhost:4444/wd/hub URL. If you deployed Selebrow on a dedicated server or Kubernetes replace localhost with the relevant hostname.  Use standard browserName and browserVersion capabilities to set specific browser and version you want to use. Refer to the capabilities page for a full list of supported capabilities.  note Since Selbrow doesn't support BiDi protocol yet, you need to set wdio:enforceWebDriverClassic capability to trueto disable BiDi protocol when using WebdriverIO test framework.  ","version":"Next","tagName":"h2"},{"title":"Example​","type":1,"pageTitle":"Webdriver","url":"/docs/usage/webdriver/#example","content":" const { remote } = require('webdriverio'); const assert = require('node:assert'); const host = '127.0.0.1'; const port = 4444; const delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)); (async () =&gt; { const browser = await remote({ hostname: host, port: port, path: '/wd/hub', capabilities: { browserName: 'chrome', // browserVersion: '123.0', // omit to run default (latest) version &quot;selenoid:options&quot;: { name: &quot;My test&quot;, // session name to display in UI env: [&quot;NO_PROXY=localhost,127.0.0.1&quot;], // additional environment variables enableVNC: true, // enable VNC server &amp; connection in UI screenResolution: &quot;1024x768x24&quot;, // screen resolution for X server desktop flavor: &quot;default&quot;, // you can select alternative image flavor hostsEntries: [&quot;github.com:10.2.3.4&quot;, &quot;host.docker.internal:host-gateway&quot;], // additional entries to /etc/hosts labels: {l1: &quot;v1&quot;}, // additional pod/container labels // applicationContainers: [&quot;cont1:alias1&quot;], // additional Docker links // additionalNetworks: [&quot;ext-net&quot;] // additional Docker netwroks to connect to }, &quot;wdio:enforceWebDriverClassic&quot;: true // disable BiDi protocol as Selebrow doesn't support it yet } }); console.log(browser.sessionId); console.log(browser.capabilities.browserVersion); try { await browser.url(process.env.SITE_URL || 'https://selebrow.dev'); await delay(15000); await browser.saveScreenshot(&quot;screen.png&quot;); } finally { await browser.deleteSession(); } })().catch((e) =&gt; { console.error(e); process.exitCode = 1; });  ","version":"Next","tagName":"h2"},{"title":"Accessing the clipboard","type":0,"sectionRef":"#","url":"/docs/usage/webdriver/clipboard-api/","content":"","keywords":"","version":"Next"},{"title":"GET /clipboard/{sessionId}​","type":1,"pageTitle":"Accessing the clipboard","url":"/docs/usage/webdriver/clipboard-api/#get-clipboardsessionid","content":" Returns plain text clipboard contents in the response.  URL path parameters:  sessionId - Webdriver session id  ","version":"Next","tagName":"h2"},{"title":"POST /clipboard/{sessionId}​","type":1,"pageTitle":"Accessing the clipboard","url":"/docs/usage/webdriver/clipboard-api/#post-clipboardsessionid","content":" Updates plain text clipboard contents with request body.  URL path parameters:  sessionId - Webdriver session id  ","version":"Next","tagName":"h2"},{"title":"Accessing remote clipboard example​","type":1,"pageTitle":"Accessing the clipboard","url":"/docs/usage/webdriver/clipboard-api/#accessing-remote-clipboard-example","content":" const assert = require('node:assert'); const { remote } = require('webdriverio'); const axios = require('axios'); const host = 'localhost'; const port = 4444; (async () =&gt; { const delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)) const browser = await remote({ hostname: host, port: port, path: '/wd/hub', capabilities: { browserName: 'chrome', // browserVersion: '123.0', // omit to run default (latest) version &quot;wdio:enforceWebDriverClassic&quot;: true // disable BiDi protocol as Selebrow doesn't support it yet } }); console.log(browser.sessionId); try { await browser.url('https://clipboardjs.com/'); const button = await browser.$('button=Copy to clipboard'); console.log(await button.getText()); await button.click(); // get remote clipboard contents const response = await axios.get(`http://${host}:${port}/clipboard/${browser.sessionId}`); console.log(response.data); assert.equal(response.data, 'Just because you can doesn\\'t mean you should — clipboard.js'); // set remote clipboard contents await axios.post(`http://${host}:${port}/clipboard/${browser.sessionId}`, &quot;hello from Selebrow&quot;); } finally { await browser.deleteSession(); } })().catch((e) =&gt; console.error(e));  ","version":"Next","tagName":"h2"},{"title":"Accessing downloaded files","type":0,"sectionRef":"#","url":"/docs/usage/webdriver/download-api/","content":"","keywords":"","version":"Next"},{"title":"GET /download/{sessionId}​","type":1,"pageTitle":"Accessing downloaded files","url":"/docs/usage/webdriver/download-api/#get-downloadsessionid","content":" List the contents of the browser's download directory. By default the response body is returned in human-readable html format. Set json query parameter to get machine-readable response.  URL path parameters:  sessionId - Webdriver session id  URL query parameters:  json - If this parameter is set, the response is returned in the json format (array of strings - file names)  ","version":"Next","tagName":"h2"},{"title":"GET /download/{sessionId}/{fileName}​","type":1,"pageTitle":"Accessing downloaded files","url":"/docs/usage/webdriver/download-api/#get-downloadsessionidfilename","content":" Retrieves the file contents from download directory in the response body.  URL path parameters:  sessionId - Webdriver session idfileName - File name to retrieve  ","version":"Next","tagName":"h2"},{"title":"DELETE /download/{sessionId}/{fileName}​","type":1,"pageTitle":"Accessing downloaded files","url":"/docs/usage/webdriver/download-api/#delete-downloadsessionidfilename","content":" Deletes the file from the download directory.  URL path parameters:  sessionId - Webdriver session idfileName - File name to retrieve  Response codes:  200 - File was deleted successfully404 - File doesn't exist500 - Error occurred while deleting the file  ","version":"Next","tagName":"h2"},{"title":"Working with download directory example​","type":1,"pageTitle":"Accessing downloaded files","url":"/docs/usage/webdriver/download-api/#working-with-download-directory-example","content":" const assert = require('node:assert'); const { remote } = require('webdriverio'); const download = require('download'); const axios = require('axios'); const host = '127.0.0.1'; const port = 4444; (async () =&gt; { const delay = ms =&gt; new Promise(resolve =&gt; setTimeout(resolve, ms)) const browser = await remote({ hostname: host, port: port, path: '/wd/hub', capabilities: { browserName: 'chrome', // browserVersion: '123.0', // omit to run default (latest) version &quot;wdio:enforceWebDriverClassic&quot;: true, // disable BiDi protocol as Selebrow doesn't support it yet &quot;goog:chromeOptions&quot;: { &quot;prefs&quot;: { &quot;plugins.always_open_pdf_externally&quot;: true, &quot;profile.default_content_setting_values.automatic_downloads&quot;: 1, &quot;download.prompt_for_download&quot;: false } }, } }); console.log(browser.sessionId); try { // list download directory contents const resp1 = await axios.get(`http://${host}:${port}/download/${browser.sessionId}?json=true`); console.log(resp1.data); assert.deepEqual(resp1.data, []); // make browser to download file await browser.url('https://github.com/selebrow/images/archive/refs/tags/v1.0.1.zip'); await delay(5000) // list download directory contents const resp2 = await axios.get(`http://${host}:${port}/download/${browser.sessionId}?json=true`); console.log(resp2.data); assert.deepEqual(resp2.data, ['images-1.0.1.zip']); const fileName = resp2.data[0]; // get remote downloaded file lcocally await download(`http://${host}:${port}/download/${browser.sessionId}/${fileName}`, './') // delete file from download directort await axios.delete(`http://${host}:${port}/download/${browser.sessionId}/${fileName}`) // list download directory contents const resp3 = await axios.get(`http://${host}:${port}/download/${browser.sessionId}?json=true`); console.log(resp3.data); assert.deepEqual(resp3.data, []); } finally { await browser.deleteSession(); } })().catch((e) =&gt; console.error(e));  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}