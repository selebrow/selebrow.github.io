"use strict";(self.webpackChunkharlequin_oss_docs=self.webpackChunkharlequin_oss_docs||[]).push([[25],{8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},8551:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"usage/webdriver/webdriver","title":"Webdriver","description":"Remote connection","source":"@site/docs/usage/webdriver/webdriver.md","sourceDirName":"usage/webdriver","slug":"/usage/webdriver/","permalink":"/docs/usage/webdriver/","draft":false,"unlisted":false,"editUrl":"https://github.com/selebrow/selebrow-website/tree/main/docs/usage/webdriver/webdriver.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"GitLab CI","permalink":"/docs/start/gitlab-ci"},"next":{"title":"Capabilities","permalink":"/docs/usage/webdriver/capabilities"}}');var r=o(4848),s=o(8453);const i={sidebar_position:0},a="Webdriver",c={},l=[{value:"Remote connection",id:"remote-connection",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"webdriver",children:"Webdriver"})}),"\n",(0,r.jsx)(n.h2,{id:"remote-connection",children:"Remote connection"}),"\n",(0,r.jsxs)(n.p,{children:["Connect to Selebrow as a remote Webdriver host using the ",(0,r.jsx)(n.code,{children:"http://localhost:4444/wd/hub"})," URL. If you deployed Selebrow\non a dedicated server or Kubernetes replace localhost with the relevant hostname."]}),"\n",(0,r.jsxs)(n.p,{children:["Use standard ",(0,r.jsx)(n.code,{children:"browserName"})," and ",(0,r.jsx)(n.code,{children:"browserVersion"})," capabilities to set specific browser and version you want to use.\nRefer to the ",(0,r.jsx)(n.a,{href:"/docs/usage/webdriver/capabilities",children:"capabilities page"})," for a full list of supported capabilities."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Since Selbrow doesn't support BiDi protocol yet, you need to set ",(0,r.jsx)(n.code,{children:"wdio:enforceWebDriverClassic"})," capability to ",(0,r.jsx)(n.code,{children:"true"}),"\nto disable BiDi protocol when using ",(0,r.jsx)(n.a,{href:"https://webdriver.io/",children:"WebdriverIO"})," test framework."]})}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const { remote } = require(\'webdriverio\');\nconst assert = require(\'node:assert\');\n\nconst host = \'127.0.0.1\';\nconst port = 4444;\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n(async () => {\n    const browser = await remote({\n        hostname: host,\n        port: port,\n        path: \'/wd/hub\',\n        capabilities: {\n            browserName: \'chrome\',\n            // browserVersion: \'123.0\',  // omit to run default (latest) version\n            "selenoid:options": {\n              name: "My test", // session name to display in UI\n              env: ["NO_PROXY=localhost,127.0.0.1"], // additional environment variables\n              enableVNC: true, // enable VNC server & connection in UI\n              screenResolution: "1024x768x24", // screen resolution for X server desktop              \n              flavor: "default", // you can select alternative image flavor\n              hostsEntries: ["github.com:10.2.3.4", "host.docker.internal:host-gateway"], // additional entries to /etc/hosts\n              labels: {l1: "v1"}, // additional pod/container labels\n              // applicationContainers: ["cont1:alias1"], // additional Docker links\n              // additionalNetworks: ["ext-net"] // additional Docker netwroks to connect to\n            },\n            "wdio:enforceWebDriverClassic": true // disable BiDi protocol as Selebrow doesn\'t support it yet\n        }\n    });\n\n    console.log(browser.sessionId);\n    console.log(browser.capabilities.browserVersion);\n\n    try {\n        await browser.url(process.env.SITE_URL || \'https://selebrow.dev\');\n        await delay(15000);\n        await browser.saveScreenshot("screen.png");        \n    } finally {    \n        await browser.deleteSession();\n    }\n\n})().catch((e) => {\n  console.error(e);\n  process.exitCode = 1;\n});\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);