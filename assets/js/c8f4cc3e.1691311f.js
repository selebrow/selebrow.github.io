"use strict";(self.webpackChunkharlequin_oss_docs=self.webpackChunkharlequin_oss_docs||[]).push([[582],{6839:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>t,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"usage/webdriver/download-api","title":"Accessing downloaded files","description":"Selebrow provides an API for working with the browser\'s download directory:","source":"@site/docs/usage/webdriver/download-api.md","sourceDirName":"usage/webdriver","slug":"/usage/webdriver/download-api","permalink":"/docs/usage/webdriver/download-api","draft":false,"unlisted":false,"editUrl":"https://github.com/selebrow/selebrow-website/tree/main/docs/usage/webdriver/download-api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Accessing Chrome DevTools","permalink":"/docs/usage/webdriver/devtools"},"next":{"title":"Playwright","permalink":"/docs/usage/playwright/"}}');var r=n(4848),d=n(8453);const i={},t="Accessing downloaded files",l={},a=[{value:"<code>GET /download/{sessionId}</code>",id:"get-downloadsessionid",level:2},{value:"<code>GET /download/{sessionId}/{fileName}</code>",id:"get-downloadsessionidfilename",level:2},{value:"<code>DELETE /download/{sessionId}/{fileName}</code>",id:"delete-downloadsessionidfilename",level:2},{value:"Working with download directory example",id:"working-with-download-directory-example",level:2}];function c(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"accessing-downloaded-files",children:"Accessing downloaded files"})}),"\n",(0,r.jsx)(s.p,{children:"Selebrow provides an API for working with the browser's download directory:"}),"\n",(0,r.jsx)(s.h2,{id:"get-downloadsessionid",children:(0,r.jsx)(s.code,{children:"GET /download/{sessionId}"})}),"\n",(0,r.jsxs)(s.p,{children:["List the contents of the browser's download directory. By default the response body is returned in human-readable html format.\nSet ",(0,r.jsx)(s.code,{children:"json"})," query parameter to get machine-readable response."]}),"\n",(0,r.jsx)(s.p,{children:"URL path parameters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sessionId"})," - Webdriver session id"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"URL query parameters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"json"})," - If this parameter is set, the response is returned in the json format (array of strings - file names)"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"get-downloadsessionidfilename",children:(0,r.jsx)(s.code,{children:"GET /download/{sessionId}/{fileName}"})}),"\n",(0,r.jsx)(s.p,{children:"Retrieves the file contents from download directory in the response body."}),"\n",(0,r.jsx)(s.p,{children:"URL path parameters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sessionId"})," - Webdriver session id"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"fileName"})," - File name to retrieve"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"delete-downloadsessionidfilename",children:(0,r.jsx)(s.code,{children:"DELETE /download/{sessionId}/{fileName}"})}),"\n",(0,r.jsx)(s.p,{children:"Deletes the file from the download directory."}),"\n",(0,r.jsx)(s.p,{children:"URL path parameters:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"sessionId"})," - Webdriver session id"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"fileName"})," - File name to retrieve"]}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"Response codes:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"200"})," - File was deleted successfully"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"404"})," - File doesn't exist"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"500"})," - Error occurred while deleting the file"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"working-with-download-directory-example",children:"Working with download directory example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:"const assert = require('node:assert');\nconst { remote } = require('webdriverio');\nconst download = require('download');\nconst axios = require('axios');\n\nconst host = '127.0.0.1';\nconst port = 4444;\n\n(async () => {\n    const delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n    const browser = await remote({\n        hostname: host,\n        port: port,\n        path: '/wd/hub',\n        capabilities: {\n            browserName: 'chrome',\n            // browserVersion: '123.0',  // omit to run default (latest) version\n            \"wdio:enforceWebDriverClassic\": true, // disable BiDi protocol as Selebrow doesn't support it yet\n\n            \"goog:chromeOptions\": {\n              \"prefs\": {\n                \"plugins.always_open_pdf_externally\": true,\n                \"profile.default_content_setting_values.automatic_downloads\": 1,\n                \"download.prompt_for_download\": false\n              }\n            },\n        }\n    });\n\n    console.log(browser.sessionId);\n\n    try {\n        // list download directory contents\n        const resp1 = await axios.get(`http://${host}:${port}/download/${browser.sessionId}?json=true`);\n        console.log(resp1.data);\n        assert.deepEqual(resp1.data, []);\n\n        // make browser to download file\n        await browser.url('https://github.com/selebrow/images/archive/refs/tags/v1.0.1.zip');\n        await delay(5000)\n\n        // list download directory contents\n        const resp2 = await axios.get(`http://${host}:${port}/download/${browser.sessionId}?json=true`);\n        console.log(resp2.data);\n        assert.deepEqual(resp2.data, ['images-1.0.1.zip']);\n        const fileName = resp2.data[0];\n\n        // get remote downloaded file lcocally\n        await download(`http://${host}:${port}/download/${browser.sessionId}/${fileName}`, './')\n\n        // delete file from download directort\n        await axios.delete(`http://${host}:${port}/download/${browser.sessionId}/${fileName}`)\n\n        // list download directory contents\n        const resp3 = await axios.get(`http://${host}:${port}/download/${browser.sessionId}?json=true`);\n        console.log(resp3.data);\n        assert.deepEqual(resp3.data, []);\n    } finally {    \n        await browser.deleteSession();\n    }\n\n})().catch((e) => console.error(e));\n"})})]})}function h(e={}){const{wrapper:s}={...(0,d.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>t});var o=n(6540);const r={},d=o.createContext(r);function i(e){const s=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(d.Provider,{value:s},e.children)}}}]);