"use strict";(self.webpackChunkharlequin_oss_docs=self.webpackChunkharlequin_oss_docs||[]).push([[995],{1509:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"usage/webdriver/devtools","title":"Accessing Chrome DevTools","description":"Selebrow provides a way to directly connect to Chrome DevTools protocol (CDP).","source":"@site/docs/usage/webdriver/devtools.md","sourceDirName":"usage/webdriver","slug":"/usage/webdriver/devtools","permalink":"/docs/usage/webdriver/devtools","draft":false,"unlisted":false,"editUrl":"https://github.com/selebrow/selebrow-website/tree/main/docs/usage/webdriver/devtools.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Accessing the clipboard","permalink":"/docs/usage/webdriver/clipboard-api"},"next":{"title":"Accessing downloaded files","permalink":"/docs/usage/webdriver/download-api"}}');var n=t(4848),r=t(8453);const i={},c="Accessing Chrome DevTools",a={},d=[{value:"Recording trace via CDP example",id:"recording-trace-via-cdp-example",level:2}];function l(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.header,{children:(0,n.jsx)(o.h1,{id:"accessing-chrome-devtools",children:"Accessing Chrome DevTools"})}),"\n",(0,n.jsxs)(o.p,{children:["Selebrow provides a way to directly connect to Chrome ",(0,n.jsx)(o.a,{href:"https://chromedevtools.github.io/devtools-protocol/",children:"DevTools protocol (CDP)"}),".\nTo use this feature just connect to the ",(0,n.jsx)(o.code,{children:"/devtools/{sessionId}"})," endpoint (where sessionId is current Webdriver session id)"]}),"\n",(0,n.jsx)(o.h2,{id:"recording-trace-via-cdp-example",children:"Recording trace via CDP example"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-typescript",children:"const { remote } = require('webdriverio');\nconst puppeteer = require('puppeteer-core');\n\nconst host = 'localhost';\nconst port = 4444;\n\n(async () => {\n    const browser = await remote({\n        hostname: host,\n        port: port,\n        path: '/wd/hub',\n        capabilities: {\n            browserName: 'chrome',\n            // browserVersion: '123.0',  // omit to run default (latest) version\n            \"wdio:enforceWebDriverClassic\": true // disable BiDi protocol as Selebrow doesn't support it yet\n        }\n    });\n\n    console.log(browser.sessionId);\n\n    try {\n        const devtools = await puppeteer.connect({ \n            browserWSEndpoint: `ws://${host}:${port}/devtools/${browser.sessionId}` \n        });\n        try {\n            const page = await devtools.newPage();\n            await page.tracing.start({\n                path: 'trace.json',\n                screenshots: true\n            })\n            await page.goto('https://selebrow.dev');\n            await page.tracing.stop()\n        } finally {\n            await devtools.close();\n        }\n    } finally {    \n        await browser.deleteSession();\n    }\n\n})().catch((e) => console.error(e));\n"})})]})}function p(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>c});var s=t(6540);const n={},r=s.createContext(n);function i(e){const o=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(r.Provider,{value:o},e.children)}}}]);