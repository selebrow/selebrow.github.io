"use strict";(self.webpackChunkharlequin_oss_docs=self.webpackChunkharlequin_oss_docs||[]).push([[171],{8335:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"concepts/pooling","title":"Browser pooling","description":"One of Selebrow\'s key performance optimizations is the browser pooling feature, which is enabled by default.","source":"@site/docs/concepts/pooling.md","sourceDirName":"concepts","slug":"/concepts/pooling","permalink":"/docs/concepts/pooling","draft":false,"unlisted":false,"editUrl":"https://github.com/selebrow/selebrow-website/tree/main/docs/concepts/pooling.md","tags":[],"version":"current","frontMatter":{"slug":"pooling"},"sidebar":"tutorialSidebar","previous":{"title":"Images","permalink":"/docs/concepts/images"},"next":{"title":"Quota and queueing","permalink":"/docs/concepts/quota"}}');var s=n(4848),r=n(8453);const i={slug:"pooling"},a="Browser pooling",c={},l=[];function p(e){const o={a:"a",h1:"h1",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"browser-pooling",children:"Browser pooling"})}),"\n",(0,s.jsx)(o.p,{children:"One of Selebrow's key performance optimizations is the browser pooling feature, which is enabled by default."}),"\n",(0,s.jsx)(o.p,{children:"When a test suite completes and releases a browser Selebrow does not destroy the browser's container and places it into an idle pool. This allows the container to be reused by subsequent test suites, significantly reducing the overhead associated with creating new containers \u2013\nan operation that can be particularly resource-intensive in busy Kubernetes environments."}),"\n",(0,s.jsxs)(o.p,{children:["For detailed information please refer to the ",(0,s.jsx)(o.a,{href:"/docs/configuration/parameters#pool-parameters",children:"pool parameters"})," documentation."]}),"\n",(0,s.jsxs)(o.p,{children:["It\u2019s important to note that each combination of browser, version and environment results in a separate pool.\nThe parameters mentioned above apply to each individual pool. For example, if one test is executed in Firefox and another in Chrome,\nthere will be two distinct pools, each capable of maintaining up to ",(0,s.jsx)(o.a,{href:"/docs/configuration/parameters#pool-max-idle",children:"pool-max-idle"})," idle browsers."]})]})}function d(e={}){const{wrapper:o}={...(0,r.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>i,x:()=>a});var t=n(6540);const s={},r=t.createContext(s);function i(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);