"use strict";(self.webpackChunkharlequin_oss_docs=self.webpackChunkharlequin_oss_docs||[]).push([[285],{3658:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"start/gitlab-ci","title":"GitLab CI","description":"Requirements","source":"@site/docs/start/gitlab-ci.md","sourceDirName":"start","slug":"/start/gitlab-ci","permalink":"/docs/start/gitlab-ci","draft":false,"unlisted":false,"editUrl":"https://github.com/selebrow/selebrow-website/tree/main/docs/start/gitlab-ci.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Kubernetes","permalink":"/docs/start/kubernetes"},"next":{"title":"Webdriver","permalink":"/docs/usage/webdriver/"}}');var t=s(4848),a=s(8453);const i={sidebar_position:2},o="GitLab CI",c={},l=[{value:"Requirements",id:"requirements",level:2},{value:"Service account and namespace setup",id:"service-account-and-namespace-setup",level:2},{value:"Job template",id:"job-template",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"gitlab-ci",children:"GitLab CI"})}),"\n",(0,t.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"GitLab version 15 or later"}),"\n",(0,t.jsxs)(n.li,{children:["GitLab ",(0,t.jsx)(n.a,{href:"https://docs.gitlab.com/runner/executors/kubernetes/",children:"Kubernetes executor"})," version 15 or later"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"service-account-and-namespace-setup",children:"Service account and namespace setup"}),"\n",(0,t.jsx)(n.p,{children:"The Selebrow service requires permissions to create browser pods. These permissions must be given to a service account which is set for build pods. It's a good idea to have separate service accounts and namespaces created for this purpose:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl create sa selebrow -n <GITLAB_NAMESPACE> \nkubectl create ns browsers\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GITLAB_NAMESPACE"})," - The Kubernetes namespace where your GitLab Runner is installed."]}),"\n",(0,t.jsxs)(n.p,{children:["Next you need a ",(0,t.jsx)(n.code,{children:"Role"})," and a ",(0,t.jsx)(n.code,{children:"RoleBinding"})," for the ServiceAccount you have created. Save the manifest below to the ",(0,t.jsx)(n.code,{children:"selebrow.yaml"})," file:"]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Kubernetes manifest"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="selebrow.yaml"',children:'apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: selebrow\nrules:\n  - apiGroups:\n      - ""\n    resources:\n      - pods\n    verbs:\n      - create\n      - get\n      - list\n      - watch\n      - delete\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: selebrow\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: selebrow\nsubjects:\n  - apiGroup: ""\n    kind: ServiceAccount\n    name: browsers\n    namespace: <GITLAB_NAMESPACE>\n'})})]}),"\n",(0,t.jsxs)(n.p,{children:["Replace ",(0,t.jsx)(n.code,{children:"<GITLAB_RUNNER_NAMESPACE>"})," with your GitLab runner's namespace name, then apply the manifest to the newly created ",(0,t.jsx)(n.code,{children:"browsers"})," namespace:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"kubectl apply -f selebrow.yaml -n browsers\n"})}),"\n",(0,t.jsx)(n.h2,{id:"job-template",children:"Job template"}),"\n",(0,t.jsxs)(n.p,{children:["Selebrow is meant to run as a ",(0,t.jsx)(n.a,{href:"https://docs.gitlab.com/ci/services/",children:"GitLab Service"}),", so we recommend to define and use separate job template:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'.selebrow:\n  services:\n    - ghcr.io/selebrow/selebrow\n  variables:\n    KUBERNETES_SERVICE_ACCOUNT_OVERWRITE: selebrow\n    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Here ",(0,t.jsx)(n.code,{children:"KUBERNETES_SERVICE_ACCOUNT_OVERWRITE"})," is used to run the job under a separate service account we created earlier,\nsee ",(0,t.jsx)(n.a,{href:"https://docs.gitlab.com/runner/executors/kubernetes/#overwrite-the-kubernetes-default-service-account",children:"GitLab documentation"})," for further details. Use the ",(0,t.jsx)(n.code,{children:"PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD"})," env to disable unnecessary browser binary downloads by Playwright."]}),"\n",(0,t.jsx)(n.p,{children:"Once the template is defined you can use it in your actual e2e test job. An example for Playwright tests:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"e2e-tests:\n  extends: .selebrow\n  image: node:22\n  before_script:\n    - npm install\n  script:\n    - npx playwright test\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var r=s(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);